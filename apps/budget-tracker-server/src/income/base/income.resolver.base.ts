/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { Income } from "./Income";
import { IncomeCountArgs } from "./IncomeCountArgs";
import { IncomeFindManyArgs } from "./IncomeFindManyArgs";
import { IncomeFindUniqueArgs } from "./IncomeFindUniqueArgs";
import { DeleteIncomeArgs } from "./DeleteIncomeArgs";
import { IncomeService } from "../income.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Income)
export class IncomeResolverBase {
  constructor(
    protected readonly service: IncomeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Income",
    action: "read",
    possession: "any",
  })
  async _incomesMeta(
    @graphql.Args() args: IncomeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Income])
  @nestAccessControl.UseRoles({
    resource: "Income",
    action: "read",
    possession: "any",
  })
  async incomes(@graphql.Args() args: IncomeFindManyArgs): Promise<Income[]> {
    return this.service.incomes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Income, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Income",
    action: "read",
    possession: "own",
  })
  async income(
    @graphql.Args() args: IncomeFindUniqueArgs
  ): Promise<Income | null> {
    const result = await this.service.income(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Income)
  @nestAccessControl.UseRoles({
    resource: "Income",
    action: "delete",
    possession: "any",
  })
  async deleteIncome(
    @graphql.Args() args: DeleteIncomeArgs
  ): Promise<Income | null> {
    try {
      return await this.service.deleteIncome(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
